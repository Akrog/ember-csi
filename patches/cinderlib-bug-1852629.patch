diff --git cinderlib/objects.py cinderlib/objects.py
index 2586954..7e20c81 100644
--- cinderlib/objects.py
+++ cinderlib/objects.py
@@ -378,14 +378,23 @@ class Volume(NamedObject):
     def connections(self):
         # Lazy loading
         if self._connections is None:
-            self._connections = self.persistence.get_connections(
-                volume_id=self.id)
-            for conn in self._connections:
-                conn.volume = self
-            ovos = [conn._ovo for conn in self._connections]
-            setattr(self._ovo, CONNECTIONS_OVO_FIELD,
-                    cinder_objs.VolumeAttachmentList(objects=ovos))
-            self._ovo.obj_reset_changes((CONNECTIONS_OVO_FIELD,))
+            # Check if the driver has already lazy loaded it using OVOs
+            if self._ovo.obj_attr_is_set(CONNECTIONS_OVO_FIELD):
+                conns = [Connection(None, volume=self, __ovo=ovo)
+                         for ovo
+                         in getattr(self._ovo, CONNECTIONS_OVO_FIELD).objects]
+
+            # Retrieve data from persistence storage
+            else:
+                conns = self.persistence.get_connections(volume_id=self.id)
+                for conn in conns:
+                    conn.volume = self
+                ovos = [conn._ovo for conn in conns]
+                setattr(self._ovo, CONNECTIONS_OVO_FIELD,
+                        cinder_objs.VolumeAttachmentList(objects=ovos))
+                self._ovo.obj_reset_changes((CONNECTIONS_OVO_FIELD,))
+
+            self._connections = conns
 
         return self._connections
 
diff --git cinderlib/persistence/base.py cinderlib/persistence/base.py
index 4c367ce..8677b69 100644
--- cinderlib/persistence/base.py
+++ cinderlib/persistence/base.py
@@ -152,12 +152,21 @@ class DB(object):
         # expected data
         objects.Volume.get_by_id = self.volume_get
         objects.Snapshot.get_by_id = self.snapshot_get
+        objects.VolumeAttachmentList.get_all_by_volume_id = \
+            self.__connections_get
 
         # Disable saving in OVOs
         for ovo_name in cinder_base_ovo.CinderObjectRegistry.obj_classes():
             ovo_cls = getattr(objects, ovo_name)
             ovo_cls.save = lambda *args, **kwargs: None
 
+    def __connections_get(self, context, volume_id):
+        # Used by drivers to lazy load volume_attachment
+        connections = self.persistence.get_connections(volume_id=volume_id)
+        ovos = [conn._ovo for conn in connections]
+        result = objects.VolumeAttachmentList(objects=ovos)
+        return result
+
     def __volume_get(self, volume_id, as_ovo=True):
         in_memory = volume_id in cinderlib.Backend._volumes_inflight
         if in_memory:
